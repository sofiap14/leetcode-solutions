There is a stream of n (idKey, value) pairs arriving in an arbitrary order, where idKey is an integer between 1 and n and value is a string. 
No two pairs have the same id.
Design a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion. 
The concatenation of all the chunks should result in a list of the sorted values.

Implement the OrderedStream class:
OrderedStream(int n) Constructs the stream to take n values.
String[] insert(int idKey, String value) Inserts the pair (idKey, value) into the stream,
then returns the largest possible chunk of currently inserted values that appear next in the order.


class OrderedStream:
    def __init__(self, n: int):
        self.arr = [''] * n
        self.ptr = 1

    def insert(self, idKey: int, value: str) -> List[str]:
        self.arr[idKey - 1] = value
        output = []
        print(idKey)
        if idKey == self.ptr:
            while self.ptr <= len(self.arr) and self.arr[self.ptr - 1] != '':
                # print(self.arr[self.ptr - 1])
                output.append(self.arr[self.ptr - 1])
                self.ptr += 1
        return output

# Your OrderedStream object will be instantiated and called as such:
# obj = OrderedStream(n)
# param_1 = obj.insert(idKey,value)

- The class takes an integer n as input.
- A list of size n called "arr" and a pointer "ptr" are created.
- The "insert" method takes an integer idKey and a string value as input.
- The "value" is added to the "arr" list at index idKey - 1.
- If idKey is equal to "ptr", a while loop checks if the elements after the current index in "arr" are not empty and appends them to "output".
- The "ptr" is incremented until it points to an empty element or the end of the "arr" list.
- The "output" list is returned.
