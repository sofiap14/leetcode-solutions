We are given a list nums of integers representing a list compressed with run-length encoding. 
Consider each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] (with i >= 0).  
For each such pair, there are freq elements with value val concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list. 
Return the decompressed list.

class Solution:
    def decompressRLElist(self, nums: List[int]) -> List[int]:
        output = []
        for i in range(0, len(nums), 2):
            freq, val = nums[i], nums[i+1]
            print("freq, val ", freq, val)
            output.extend([val]*freq)
        return output

- The function takes a list of integers as input.
- A new list called "output" is created.
- A loop is run through the input list, stepping by 2.
- For each iteration, the first and second elements are assigned to freq and val respectively.
- A new list containing val repeated freq times is appended to the "output" list.
- The resulting "output" list is returned.
