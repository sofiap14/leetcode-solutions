In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.
You are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.
The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.
If the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.

 class Solution:
    def matrixReshape(self, mat: List[List[int]], r: int, c: int) -> List[List[int]]:
        #convert 2d to 1d array
        flatmat = []
        for sublist in mat:
            flatmat.extend(sublist)
        
        #check if valid reshaping
        if r*c != len(flatmat):
            return mat

        res = []
        for i in range(r):
            res.append(flatmat[i*c : (i+1)*c]) # flatmat[[0:4]]
        return res

1. Flatten 2D matrix mat into 1D list flatmat.
2. Check if the new matrix of shape (r, c) is valid by comparing its size to the length of flatmat.
3. Create an empty list res to hold the reshaped matrix.
4. Loop through r times and append the sliced portion of flatmat corresponding to each row to res.
5. Return res as the reshaped matrix.
