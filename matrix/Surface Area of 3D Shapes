You are given an n x n grid where you have placed some 1 x 1 x 1 cubes. Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).
After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.
Return the total surface area of the resulting shapes.
Note: The bottom face of each shape counts toward its surface area.

class Solution:
    def surfaceArea(self, grid: List[List[int]]) -> int:
        n = len(grid)
        sa = 0
        for i in range(n):
            for j in range(n):
                h = grid[i][j]
                if h > 0:
                    sa += 2 + 4*h
                if j > 0:
                    sa -= 2 * min(h, grid[i][j-1])
                if i > 0:
                    sa -= 2 * min(h, grid[i-1][j])
        return sa
        
1. The function takes a square grid as input and returns the surface area of the 3D object it represents.
2. The surface area is initially set to zero.
3. For each cell in the grid, the height is retrieved.
4. If the height is greater than zero, the surface area is increased by 2 plus 4 times the height.
5. If the current cell is not on the first column, the surface area is decreased by 2 times the minimum height between the current cell and the one on its left.
6. If the current cell is not on the first row, the surface area is decreased by 2 times the minimum height between the current cell and the one above it.
7. The final surface area is returned.
